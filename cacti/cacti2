cacti监控磁盘IO利用率 (2011-09-21 11:22)
分类： 系统监控
插件下载：
https://github.com/markround/Cacti-iostat-templates

一、被监控端
cp scripts/iostat-persist.pl /usr/local/bin/
chmod +x /usr/local/bin/iostat-persist.pl
 添加计划任务：
*/2 * * * * cd /tmp && iostat -xkd 30 2 | sed 's/,/\./g' > io.tmp && mv io.tmp iostat.cache
 
 注：我试图不用添加计划任务，功能可以实现，但是数据断断续续。详细见后面，。
 
 添加oid
pass_persist .1.3.6.1.3.1 /usr/bin/perl /usr/local/bin/iostat-persist.pl
 
 iostat-persist.pl和iostat.pl的区别：
 There is also a much improved persistent script which involves a lot less forking,
and also a caching mechanism. If you would like to use this version (recommended)

二、cacti服务器
1、测试
snmpwalk -v 2c 59.51.24.18 -c public .1.3.6.1.3.1.13
SNMPv2-SMI::experimental.1.13 = No Such Instance currently exists at this OID
  
如果snmp中已经添加了上面的pass_persist，则有可能是selinux造成的，查看/var/log/audit/audit.log，有下面的日志（对于RHEL，注意查看/var/log/message）
type=AVC msg=audit(1316500461.989:3076): avc:  denied  { read } for  pid=17209 comm="perl" name="iostat.cache" dev=dm-0 ino=1177351 scontext=user_u:system_r:snmpd_t:s0 tcontext=root:object_r:tmp_t:s0 tclass=file
看不到该日志？
Turn on all AVC Messages for which
SELinux currently is "dontaudit"ing.
semodule -DB
Turn "dontaudit" rules back on.
semodule -B

ls -Z /tmp/iostat.cache
可以看到权限确实有问题。

将上面的日志保存到一个文件中，如1.log，执行
audit2allow -m local -l -i ./1.log >local.te
audit2allow：
rhel5：policycoreutils
rhel6：policycoreutils-python.x86_64

local.te的内容类似于
 
module local 1.0;
require {
	type snmpd_t;
        
	type tmp_t;
        
	class file  read ;
}
#============= snmpd_t =============
allow snmpd_t tmp_t:file  read ;

继续：
checkmodule -M -m -o local.mod local.te
semodule_package -o local.pp -m local.mod
semodule -i local.pp

成功后，重新执行snmpwalk -v 2c  59.51.24.18 -c public .1.3.6.1.3.1.13，发现又有新的报错，
type=AVC msg=audit(1316500461.989:3076): avc:  denied  { read } for  pid=17209 comm="perl" name="/tmp/iostat.cache" dev=dm-0 ino=1177351 scontext=user_u:system_r:snmpd_t:s0 tcontext=root:object_r:tmp_t:s0 tclass=file
type=AVC msg=audit(1316501743.698:109): avc:  denied  { ioctl } for  pid=3294 comm="perl" path="/tmp/iostat.cache" dev=dm-0 ino=1177349 scontext=user_u:system_r:snmpd_t:s0 tcontext=root:object_r:tmp_t:s0 tclass=file
type=AVC msg=audit(1316501743.698:110): avc:  denied  { getattr } for  pid=3294 comm="perl" path="/tmp/iostat.cache" dev=dm-0 ino=1177349 scontext=user_u:system_r:snmpd_t:s0 tcontext=root:object_r:tmp_t:s0 tclass=file
 
重复上面的步骤,这次把新的两条和上面的一条错误一起放到log文件里。
audit2allow -m local -l -i ./1.log >local.te
local.te内容为：
module local 1.0;
require {
	type snmpd_t;
        
	type tmp_t;
        
	class file { read ioctl getattr };
}
#============= snmpd_t =============
allow snmpd_t tmp_t:file { read ioctl getattr };
 
checkmodule -M -m -o local.mod local.te && semodule_package -o local.pp -m local.mod && semodule -i local.pp

执行snmpwalk，这次成功取到了数据
snmpwalk -v 2c  1.1.1.1 -c public .1.3.6.1.3.1.13
SNMPv2-SMI::experimental.1.13.1 = STRING: "0.11"
SNMPv2-SMI::experimental.1.13.2 = STRING: "0.00"
SNMPv2-SMI::experimental.1.13.3 = STRING: "0.11"
SNMPv2-SMI::experimental.1.13.4 = STRING: "0.11"
SNMPv2-SMI::experimental.1.13.5 = STRING: "0.00"

2、
导入cacti的模板
cp /opt/markround-Cacti-iostat-templates-7394c7b/snmp_queries/linux/iostat.xml /usr/local/nginx/html/cacti/resource/snmp_queries/

chown cacti.cacti/usr/local/nginx/html/cacti/resource/snmp_queries/iostat.xml
 

我只想监控磁盘利用率，所以我只导入了以下几个模板
Import Templates菜单下导入：
cacti_data_query_iostat_-_utilisation.xml
cacti_graph_template_iostat_-_utilisation.xml

注：导如后，建议修改一下
原始模板是在Current:后面换行，所以造成监控图中看不到current的数据，更改为在max后换行
graph templates-> iostat - Utilisation ->
将Item # 5 中的Insert Hard Return的对勾去掉。
将Item # 4 中的Insert Hard Return的对勾勾选上。


画图
Associated Data Queries下添加即可






关于不cache iostat的数据，每次snmp来取数时再用iostat获取数据，这样就不需要添加cron计划任务，也不需要iostat.cache文件了，但是缺点是经常会取不到数据。

1、snmpd.conf中添加：pass .1.3.6.1.3.1 /usr/bin/perl /usr/local/bin/iostat.pl
2、修改iostat.pl
iostat.pl修改为：
 iostat.txt   
#!/usr/bin/env perl
use strict;

use constant debug => 0;
my $base_oid = ".1.3.6.1.3.1";
my $req;
my %stats;
my $devices;

process();

my $mode = shift(@ARGV);
if ( $mode eq "-g" ) {
    $req = shift(@ARGV);
    getoid($req);
}
elsif ( $mode eq "-n" ) {
    $req = shift(@ARGV);
    my $next = getnextoid($req);
    getoid($next);
}
else {
    $req = $mode;
    getoid($req);
}

sub process {
    $devices = 1;
    open( IOSTAT, "iostat -xkd 1 2 | sed 's/,/\./g'|" )
      or return ("Could not run iostat : $!");

    my $header_seen = 0;

    while (<IOSTAT>) {
        if (/^[D|d]evice/) {
            $header_seen++;
            next;
        }
        next if ( $header_seen < 2 );
        next if (/^$/);
        
           /^([a-z0-9\-\/]+)\s+(\d+[\.,]\d+)\s+(\d+[\.,]\d+)\s+(\d+[\.,]\d+)\s+(\d+[\.,]\d+)\s+(\d+[\.,]\d+)\s+(\d+[\.,]\d+)\s+(\d+[\.,]\d+)\s+(\d+[\.,]\d+)\s+(\d+[\.,]\d+)\s+(\d+[\.,]\d+)\s+(\d+[\.,]\d+)/;

           $stats{"$base_oid.1.$devices"} = $devices;    # index
           $stats{"$base_oid.2.$devices"} = $1;        # device name
           $stats{"$base_oid.3.$devices"} = $2;        # rrqm/s
           $stats{"$base_oid.4.$devices"} = $3;        # wrqm/s
           $stats{"$base_oid.5.$devices"} = $4;        # r/s
           $stats{"$base_oid.6.$devices"} = $5;        # w/s
           $stats{"$base_oid.7.$devices"} = $6;        # rkB/s
           $stats{"$base_oid.8.$devices"} = $7;        # wkB/s
           $stats{"$base_oid.9.$devices"} = $8;        # avgrq-sz
           $stats{"$base_oid.10.$devices"} = $9;        # avgqu-sz
           $stats{"$base_oid.11.$devices"} = $10;        # await
           $stats{"$base_oid.12.$devices"} = $11;        # svctm
           $stats{"$base_oid.13.$devices"} = $12;        # %util


        $devices++;
    }

}

sub getoid {
    my $oid = shift(@_);
    print "Fetching oid : $oid\n" if (debug);
    if ( $oid =~ /^$base_oid\.(\d+)\.(\d+).*/ && exists( $stats{$oid} ) ) {
        print $oid. "\n";
        if ( $1 == 1 ) {
            print "integer\n";
        }
        else {
            print "string\n";
        }

        print $stats{$oid} . "\n";
    }
}

sub getnextoid {
    my $first_oid = shift(@_);
    my $next_oid = '';
    my $count_id;
    my $index;

    if ( $first_oid =~ /$base_oid\.(\d+)\.(\d+).*/ ) {
        print("getnextoid($first_oid): index: $2, count_id: $1\n") if (debug);
        if ( $2 + 1 >= $devices ) {
            $count_id = $1 + 1;
            $index = 1;
        }
        else {
            $index = $2 + 1;
            $count_id = $1;
        }
        print(
            "getnextoid($first_oid): NEW - index: $index, count_id: $count_id\n"
        ) if (debug);
        $next_oid = "$base_oid.$count_id.$index";
    }
    elsif ( $first_oid =~ /$base_oid\.(\d+).*/ ) {
        $next_oid = "$base_oid.$1.1";
    }
    elsif ( $first_oid eq $base_oid ) {
        $next_oid = "$base_oid.1.1";
    }
    print("getnextoid($first_oid): returning $next_oid\n") if (debug);
    return $next_oid;
}
