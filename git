$ sudo curl -L -k http://github.com/ossxp-com/repo/raw/master/repo |  sudo tee /usr/local/bin/repo
$ sudo chmod a+x /usr/local/bin/repo 



1. Git恢复历史上删除的文件
git checkout commitfoobar -- /foo/bar.file

2. error: Untracked working tree file '......' would be overwritten by merge. Aborting**
解决办法: git clean -dqfx

3. 查看所有的提交日志
git log --full-history

--full-history 查看所有的历史记录,而Git默认会忽略内容没有改动的提交的日志,不显示出来


长期分支
master
用途: 稳定版本的分支,产品发布的分支
位置: remote,local

develop
用途: 开发版本
位置: remote,local

短期分支
feature
用途: 特性/功能开发
位置: local,remote*(可以通过feature publish发布到remote上,供团队协作)
分支建立: 从develop分支建立,可以指定起始点
分支合并: 合并回develop分支

release
用途: 版本发布的准备分支
位置: local,remote*(可以通过release publish发布到remote上,供团队协作)
分支建立: 从develop分支建立,可以指定起始点
分支合并: 合并回develop和master分支

hotfix
用途: 紧急Bug修复
位置:local
分支建立: 从master建立分支
分支合并: 合并回master和develop




feature
用法:
git flow feature [list] [-v]

git flow feature start [-F] <name> [<base>]
git flow feature finish [-rFk] <name|nameprefix>
git flow feature publish <name>
git flow feature track <name>
git flow feature diff [<name|nameprefix>]
git flow feature rebase [-i] [<name|nameprefix>]
git flow feature checkout [<name|nameprefix>]
git flow feature pull <remote> [<name>]

feature start
用法: git flow feature start [-F] <name> [<base>]
功能: 以指定的commit名称(由base参数指定)创建一个feature分支
参数:
-F
'fetch from origin before performing local operation' (建立分支前先从origin下载数据) 默认为false
该参数在0.4版本有bug,不可用,可以使用 git fetch -q orgin develop代替

name
feature的名称,对应的分支名称为feature/name

base
建立feature的start point,默认为develop分支

等价的Git 命令:
1. git fetch -q origin develop //当 -F 设置的时候执行,只是更新.git中的remote内容,不做merge操作
2. 检查本地的develop分支和远程的develop分支是否一致,即refs/develop 和 refs/remote/origin/develop(建议先执行git pull origin develop或者git fetch origin develop)
3. git checkout -b feature/name develop //建立分支

例子:
git flow feature start story_1

feature publish
用法: git flow feature publish <name>
功能: 将一个本地的feature分支push到远程的仓库中,该命令可用于与团队其他成员合作开发或者备份自己的代码
参数:
name
本地feature的名称

等价的Git命令:
1. 检查本地的工作目录及分支
2. git fetch -q origin
3. git push origin feature/name:refs/heads/feature/name
4. git fetch -q origin
5. git checkout feature/name

例子:
git feature publish story_1

feature track
用法: git flow feature track <name>
功能: 将由feature publish发布的feature分支从远程仓库下载到本地,并建立同名分支
参数:
name
远程feature的名称,对应feature publish的名称

等价的Git命令:
1. 检查本地的工作目录是否"干净";检查分支是否已经存在,如果已经存在,则报错退出
2. git fetch -q origin
3. git checkout -b name origin/feature/name

例子:
git feature track name

feature pull
用法: git flow feature pull <remote> [<name>]
功能: 将由feature publish发布的feature分支从远程仓库下载到本地,并建立同名分支;如果本地已经有同名分支,则对其执行pull操作
参数:
name
远程feature的名称,对应feature publish的名称

等价的Git命令:
a. 如果本地已有name分支
1. git pull -q origin feature/name

b. 如果本地没有name分支
1. git fetch -q origin feature/name
2. git branch --no-track feature/name
3. git checkout -q feature/name

例子:
git flow feature pull origin story_1

feature finish
用法: git flow feature finish [-rFk] <name|nameprefix>
功能: 完成由name指定的feature分支的开发,将其合并到本地的develop分支,合并成功后删除该分支
参数:
-r
在合并到develop分子时,使用rebase机制,而不是merge

-F
在执行finish操作前,先执行fetch,从远程仓库下载更新

-k
执行完finsh后,保留feature分支,即不删除分支

name
feature的名称,对应feature start的名称

等价的Git命令:
1. git fetch -q origin feature/name #当参数中设置了-F时
2. git flow feature rebase name develop #当参数中设置了-r时
3. git checkout develop
4. git merge feature/name #_根据develop分支和feature/_name分支之间的提交的个数决定是否设置-no-ff
5. #如果设置了_-F参数,则删除远程的分支 git push origin :ref/heads/feature/_name
6. #如果没有设置_-k{_}参数,则删除本地的分支

例子:
git flow feature finish story_1

feature rebase
用法: git flow feature rebase [-i] [<name|nameprefix>]
功能: 以develop分支作为upstream,对指定的feature分支执行rebase操作
参数:
-i
等价与rebase -i

name
feature的名称

等价的Git命令:
1. git checkout -q feature/name
2. git rebase develop

例子:
git flow feature rebase -i story_1

release
用法:
git flow release [list] [-v]
git flow release start [-F] <version>
git flow release finish [-Fsumpk] <version>
git flow release publish <name>
git flow release track <name>

release start
用法: git flow release start [-F] <version> [<base>]
功能: 从develop分支指定的起始点(可选,默认为HEAD)建立版本发布的分支
参数:
version
版本号

base
建立分支的起始点,可选参数,默认为develop HEAD

等价的Git命令:
1. git checkout -b release/version develop

例子:
git flow release start v0.1

release publish
用法: git flow release publish <name>
功能: 将release分支发布的远程仓库,供团队协作
参数:
name
release名称,与start 中的version相对应

等价的Git命令:
1. git fetch -q origin
2. git push origin release/name:refs/heads/release/name

例子:
git flow release publish v0.1

release track
用法: git flow release track <name>
功能: 将由 publish发布的feature分支从远程仓库下载到本地,并建立同名分支,供团队协作
参数:
name
远程feature的名称,对应feature publish的名称

等价的Git命令:
1. git fetch -q origin
2. git checkout -b release/name origin/release/name

例子:
git flow release track v0.1

release finish
用法: git flow release finish [-Fsumpk] <version>
功能: 完成由version指定的release分支的开发,将其合并到develop和master分支,并为该分支创建一个tag
参数:
-F
执行操作前先执行fetch

-s
对新建的tag签名

-u
签名使用的GPG-key

-m
使用指定的注释作为tag的注释

-p
当操作结束后,push到远程仓库中

-k
保留分支

-n
不创建tag

version
版本号

等价的Git命令:
1. 如果设置了 -F 参数,下载更新
1.1 git fetch -q origin master
1.2 git fetch -q origin develop

2. 合并回master分支
2.1 git checkout master
2.2 git merge --no-ff release/version

3. 如果没有设置 -n 参数,创建tag
3.1 git tag

4. 合并回develop分支
4.1 git checkout develop
4.2 git merge --no-ff release/version

5. 如果没有设置 -k 参数
5.1 git branch -d release/version

6. 如果设置 -p 参数
6.1 git push origin develop
6.2 git push origin master
6.3 git push --tags origin
6.4 git push orign :release/version #删除远程仓库中的release分支

例子:
git flow release finish -p v0.1


1:clone代码仓库
clone前端js项目到当前目录：
windows系统下操作：
git clone git@192.168.12.139:new-twitter-resource.git
linux系统下操作：
git clone git@192.168.12.139:/opt/git//new-twitter-resource.git

clone后端jsp项目到当前目录：
git clone git@192.168.12.139:git-new-twitter.git

2：创建和维护本地分支
查看本地分支：
git branch

创建和远程develop分支同步的本地develop分支：
git checkout -b develop origin/develop

基于当前分支创建本地分支app用于本地开发
git checkout -b app

切换到一个现有分支
git checkout app

删除本地分支：
git branch -d app

强制删除本地分支：
git branch -D app

合并某分支到当前分支
git merge develop

3：创建和维护远程分支
查看远程分支：
git branch -r

将本地分支推送到远端成为远程分支：
git push origin app

删除远程分支
git push origin :app(远程分支名-不必包含origin)

清理本地仓库中远程分支记录
git branch -d -r origin/app

4:本地提交操作
查看代码状态
git status

新增或者将已存在文件放入暂存区
git add file.js

取消暂存区的某个文件
git reset HEAD file.js

提交暂存区文件
git commit

放弃本地代码修改
git checkout – file.js

删除一个文件：
git rm file.js

重命名文件，或者移动
git mv file.js file2.js

比较代码差异
git diff

5:保存和恢复进度
(当你不想提交，只是临时保存当前进度，以便切换分支时，可以使用这组命令)
*保存当前进度
git stash

*查看当前进度列表
git stash list

*恢复最近保存的进度（并从进度列表中删除该进度）
git stash pop

*删除最近保存的一个进度
git stash drop

*删除所有存储的进度
git stash clear

6:和远程仓库交互
拉取远程仓库信息(该命令可以获取远程分支列表，tag列表等重要信息)
git pull

拉取某一分支代码并合并到本地对应分支
git pull origin develop

推送本地分支到远程仓库分支
git push origin develop

7:tag操作
查看已有tag列表(需要先使用git pull才能获取全部的远程tags)
git tag

打tag
git tag ***

推送本地tags到远程仓库
git push --tags

删除本地tag
git tag -d ****

删除远程tag
git push origin :refs/tags/****

8：hotfix紧急流程(紧急修复线上严重bug)
1):拉取线上部署代码，创建新分支依据发布tag号
git checkout -b hotfix tag***

2):修改bug

3)：推送该分支到远程（因为发布模式导致，需要远程分支存在，推送的tag才有效果）
git push origin hotfix

4):标记tag(以fixed后缀命名，标识这是一个hotfix)
git tag r***_fixed

5):推送tag
git push --tags

6):运维依据此tag发布修复版本

7):上线完成后合并hotfix到develop分支

8):清理hotfix分支(清理hotfix分支需要在下次再进行一次正常上线之后来清理，这样这个fixed的tag才能一直有效)

附：忽略对某些文件的跟踪
在代码根目录下创建
.gitignore
文件内容类似以下
.idea/
target/
*.bak
*~
*.swp
*.iml
*.bak
test/
j/
j-c/
target/
*.rar
.project
.settings/



工程初始化
1. git clone xxxx
2. cd project_home
3. git flow init

几个原则
团队应该遵守以下原则:
1. 不要在master分支上直接做开发和提交,所有的特性,bug修复等都应该建立分支,在这些分支上进行开发.
2. master分支应该只做分支合并,版本发布
3. 每个人应该只推送更新到自己的分支(包括有协作的分支)，不能破坏其他人的分支
4. 每天定期从你所工作分支的上游(upstream)分支进行更新,建议经常做rebase操作,避免工作分支与上游分支差异过大导致的合并困难
5. 向远端仓库Push代码时,要确保在本地编译和测试通过后,再Push,避免给其他人带来困扰

新功能和特性开发
1. 建立feature分支
1.1 git flow feature start <name>

1.2 如果需要多人协作开发一个,将其发布到remote
git flow feature publish <name>

团队中的其他成员使用下面的命令更新分支
git flow feature track <name>

2. 开发过程中
2.1 单人开发
定期使用rebase更新
a)
git fetch origin develop
git flow feature rebase <name>
或者
b)
git checkout develop
git pull origin develop
git flow feature rebase <name>

2.2 多人开发
多人开发除了定期更新上游分支外(即单人开发所做的事情),还要定期地push工作分支的内容到remote,以方便团队协作
git push origin feature/<name> # 推送到remote

而团队中的其他成员,可以更新:
git flow feature pull <name>

3. 结束开发
3.1 当开发结束后,执行下面的命令,将此次开发的内容合并到develop分支中.
git flow feature finish <name>

3.2 如果之前有publish操作,即远程仓库中也有该分支,可以删除
git push origin :feature/<name>

3.3 将本地的develop分支push到remote中(可以考虑邮件通知团队)
git push origin develop

Release版本开发
release版本的开发,和feature类似,也分别有start,publis,track,finish等阶段,但是由Git flow所做的工作更多.

















对SVN的迷信和对Git的误解
误解1：SVN只能检出（checkout）一个版本（revision）的代码，而Git却可以脱库！

这个误解是如此普遍，简直成了SVN在企业市场中封杀Git的尚方宝剑。其实稍微思考一下 这个谣言就很难传播。既然SVN能够读取授权访问的文件的每一个版本，那么就能够重组这些版本， 进而实现对版本库的完整复制。即SVN也可以脱库。

SVN脱库的工具SVN本身就提供： svnsync 。这个工具主要用于SVN的版本库镜像。 例如将版本库 http://host.name/svn/repo 脱库到本地的 dump 目录，命令如下：

$ svnadmin create dump
$ printf '#!/bin/sh\nexit 0\n' > dump/hooks/pre-revprop-change
$ chmod a+x dump/hooks/pre-revprop-change
$ svnsync init file://$(pwd)/dump http://host.name/svn/repo
$ svnsync sync file://$(pwd)/dump
如果使用 git-svn 则为SVN“脱库”更简便。

$ git svn clone -s http://host.name/svn/repo dump
有人认为SVN可以对目录授权，从而阻止对整个版本库进行脱库操作。 下面就来看看SVN的授权究竟是否可靠。




SVN的目录授权对管理员来说是灾难，管理负担相当重，在分支或里程碑众多的时候很难作对。 这是因为SVN的分支和里程碑（tags）本身就是一个目录（使用目录拷贝实现的）。

例如管理员为名为demo的SVN版本库授权。一个并不太复杂的主线（/trunk）授权如下：

[demo:/trunk]
@demo-admin = rw
@leaders = r

[demo:/trunk/doc]
@demo-dev = rw
@designers = rw

[demo:/trunk/src/apps]
@demo-dev = rw

[demo:/trunk/src/common]
@demo-dev = rw

[demo:/trunk/src/html]
@designers = rw

[demo:/trunk/src/secret]
* =
@demo-admin = rw
jiangxin = rw
如果项目创建了维护分支 /branches/1.x ，若和 /trunk 授权相同，则需要将上述授权在 /branches/1.x 下重建。需要在授权文件中再添加如下授权指令：

[demo:/branches/1.x]
@demo-admin = rw
@leaders = r

[demo:/branches/1.x/doc]
@demo-dev = rw
@designers = rw

[demo:/branches/1.x/src/apps]
@demo-dev = rw

[demo:/branches/1.x/src/common]
@demo-dev = rw

[demo:/branches/1.x/src/html]
@designers = rw

[demo:/branches/1.x/src/secret]
* =
@demo-admin = rw
jiangxin = rw
如果版本库的分支和里程碑越来越多，配置的工作量相当可观，稍有不慎不是授权文件格式破坏导致SVN无法工作， 就是造成开放授权。

我曾经写过SVN路径授权的补丁，并写了一款SVN版本库管理的开源软件 （参见 《pySvnManager手册》 ）， 但想完美解决这个问题很难。我的一个设想是在SVN对分支和里程碑授权检查时缺省使用 /trunk 的授权，但这样的实现要求使用SVN严格遵循约定俗成的三个顶级目录的规范。

Git对于写操作可以精细到目录和分支级别（使用Gitolite作为服务器）， 但作为分布式版本库控制系统，在设计上只能实现版本库量子化的读授权。 即某用户对整个版本库要么都能读，要么对整个版本库都不能读。

那么如何控制Git版本库的读授权呢？实际上Git可以通过子模组来实现细粒度的读授权。 即在项目需要精细授权的场合，将版本库拆分为多个Git版本库进行单独授权， 再使用子模组将多个版本库整合为一个。这个操作并不复杂，而且有助于实现项目的模块化。

误解3：Git能随意改变历史提交，这对于版本控制来说是不合适的

Git对历史提交的修改只对本地提交有意义。本地提交就像是和共享版本库间的缓冲。 在未将本地提交推送到远程共享版本库之前，开发者可以后悔。可以对不完整的提交说明进行补充， 可以移除错误的提交，可以压缩合并提交等。Git对提交历史灵活的操作是Git独有的功能， 是提交审核的必备工具。

对于已经推送到远程共享服务器的提交，Git就不能再像本地一样随意更改了。 因为推送到共享版本库的提交一旦被其他程序员获取，便扩散出去， 如覆水难收，难掩众人悠悠之口。所以Git更改历史提交只对本地有效，是安全的。

相比之下，SVN本地工作区和集中式版本库之间没有缓冲，一旦发现提交了错误内容， 或写了错误的提交说明，则无法更改，除非SVN管理员介入。 SVN也允许配置为可修改历史提交说明，但是一旦管理员放开此功能， 历史提交的提交说明有可能被批量、恶意更改，并且无法恢复。


误解4：SVN对中文支持更好，Git库中的中文目录和文件名会出现乱码

我也曾经这么认为，并在《Git权威指南》第3章中用了大量篇幅介绍中文支持的注意事项。 并推荐使用Cygwin作为首选客户端，以避免GBK字符集为跨平台开发的版本库引入乱码。

一个好消息是Windows下最常用的Git客户端 msysGit 也支持Unicode了。 使用最新版本（1.7.10）的 msysGit 无需设置任何Git配置变量， 版本库中的中文文件名、目录名、提交说明都使用Unicode编码。 配合使用Unicode版的TortoiseGit（最新的1.7.9.0版本已是Unicode版）， Windows用户就不再为跨平台开发的字符集问题而伤脑筋了。

误解5：SVN的认证方式比Git丰富，比如可以实现LDAP认证

我为客户配置的Git支持HTTP、SSH协议，和Gitweb。其中HTTP协议、Gitweb都使用LDAP认证， 实现统一的口令管理。并且无论是HTTP协议、SSH协议，还是Gitweb都使用同一套Gitolite授权。


误解6：SVN更易上手，更易管理；而Git太难和太灵活了，不适合团队？

如果想把配置管理做好，无论是 SVN 还是 Git 都不容易，否则 《SVN Book》 以及我写 《Git权威指南》 也不会有那么厚了。

觉得SVN更简单的，看看下面的错误你有没有犯？

很多公司的SVN版本库没有遵照约定俗成的三个顶级目录。
如何配置SVN悲观锁，以便更好地对二进制文件编辑进行协同。
维护合并追踪的 svn:mergeinfo 属性，以便能够正确的分支合并。还要防止无此功能的客户端对其的破坏。
SVN如何正确的反删除，直接添加删除的文件是不对的。
如何使用 svn:eol-style 属性，以便正确处理跨平台开发时的文件换行符问题。
SVN管理员如何对版本库进行整理，如撤出不当提交、修改错误的提交说明。
版本库的安全性问题，如何做好版本库的备份。
SVN对分支当做路径来授权，造成管理的负担（参见 前面的描述 ）， 因此使用SVN实现灵活的特性分支开发、可靠的发布控制（维护分支冻结）很难。

企业应用Git的困惑之一是如何裁剪出适合自己的工作流。实际上Git本身已经给出范例：

$ git help workflows
理解Git的应用模型并选用合适的服务器端软件（如 Gitolite），可以定制出适合自己的工作流。 例如下表就是在企业中使用Git版本控制系统的典型角色划分：

系统管理员   配置管理员  发布工程师  整合工程师  模块负责人  开发工程师
(SYSadm)     (SCMadm)    (RELeng)    (INTegrator)    (MODmaster)     (DEV)
创建版本库       ✔              
版本库授权       ✔              
版本库改名   ✔   ?              
删除版本库   ✔   ?              
创建Tag          ✔          
删除Tag      ✔              
创建一级分支         ✔              
为分支授权       ✔              
向 maint 分支强推        ✔              
向 master 分支强推       ✔              
向 maint 分支写入            ✔          
向 master 分支写入               ✔   ✔  
创建个人专有分支         ✔   ✔   ✔   ✔   ✔
创建个人专有版本库       ✔   ✔   ✔   ✔   ✔
为个人专有版本库授权         ✔   ✔   ✔   ✔   ✔

再来谈谈Git的使用，实际上Git的设计模型非常简单，理解了其设计思想，就可以很容易地掌握 git reset, git checkout, git rebase, git push, git pull 等命令。

误解7：程序员不喜欢命令行

谁说Git没有好的图形工具？SVN 有 TortoriseSVN，Git 同样有 TortoiseGit。 只不过Git的命令行太好用，使得图形操作显得笨拙。

至于Windows用做开发环境是否还有前途，看看火热的iOS、Android开发、和优雅的 MacBook 就知道了。

Git能做到，而SVN难以做到的事情
优势1：使用Git，团队规模不受版本库工具自身的限制

最坏的情况下（每次提交都要会修改同一文件，例如版本库中仅包含一个文件），一个SVN版本库的每小时提交次数存在上限。如果无冲突合并再提交需用时30秒、冲突解决再提交用时300秒，这个上限可能是每小时40个提交。据此一个相对密集开发的版本库拥有四五十个提交账号可能就是极限。

Git的提交是在本地完成的，加之可以采用版本库分级控制的分布式开发模型，因此只有天空才是极限。

优势2：Git分支功能最为强大，分支管理能力让SVN望尘莫及

Git可以很容易地对比两个分支，知道一个分支中哪些提交尚未合并到另一分支，反之亦然。

查看当前分支比other分支多了哪些提交：

  $ git log other..
查看other分支比当前分支多了哪些提交：

  $ git log ..other
我不认为SVN的分支是真正的分支，因为分支最基本的提交隔离SVN就没能实现。 在SVN中一次提交可以同时更改主线（/trunk）和分支中的内容， 所以判断一个分支中哪些提交未合并到另外的分支，完全不能对SVN抱有希望。

优势3：Git可以实现更好的发布控制

针对同一个项目，Git可以设置不同层级的版本库（多版本库）， 或者通过不同的分支（多分支）实现对发布的控制。

设置只有发布管理员才有权限推送的版本库或者分支，用于稳定发布版本的维护。
设置只有项目经理、模块管理员才有权推送的版本库或者分支，用用于整合测试。

优势4：隔离开发，提交审核

如何对团队中的新成员的开发进行审核呢？在Git服务器上可以实现用户自建分支和自建版本库的功能， 这样团队中的新成员既能将本地提交推送到服务器以对工作进行备份， 又能够方便团队中的其他成员对自己的提交进行审核。

审核新成员提交时，从其个人版本库或个人分支获取（fetch）提交，从提交说明、代码规范、编译测试 等多方面对提交逐一审核。审核通过执行 git merge 命令合并到开发主线中。

优势5：对合并更好的支持，更少的冲突，更好的冲突解决

因为Git基于对内容的追踪而非对文件名追踪，所以遇到一方或双方对文件名更改时， Git能够很好进行自动合并或提供工具辅助合并。而SVN遇到同样问题时会产生树冲突， 解决起来很麻烦。

Git的基于DAG（有向非环图）的设计比SVN的线性提交提供更好的合并追踪， 避免不必要的冲突，提高工作效率。这是开发者选择Git、抛弃SVN的重要理由。

优势6：保证已修复Bug不再重现

以为创建完毕里程碑标签（tag）便完成软件版本的发布是有风险的， 往往会由于之前的版本（维护版本）中的一些 Hotfix 提交没有合并到最新版本而造成已修复问题在新版本中重现。

Git分支和合并追踪可以解决这个问题。例如用 maint 分支跟踪最新的发行版， 当确定里程碑tag v1.6.4 为最新发行版时，在 maint 分支执行如下命令以切换到最新发行版：

$ git checkout maint
$ git merge --ff-only v1.6.4
如果合并成功，代表发行版 v1.6.4 包含了所有前一个发行版的提交。 反之说明前一个发行版某个或某些Hotfix提交尚未合并到最新发行版中。

优势7：版本库的安全性

SVN版本库安全性很差，是管理员头痛的问题。

SVN版本库服务器端历史数据被篡改，或者硬盘故障导致历史数据被篡改时， 客户端很难发现。管理员的备份也会被污染。
SVN作为集中式版本控制系统，存在单点故障的风险。备份版本库的任务非常繁重。
Git在这方面完胜SVN。首先Git是分布式版本控制系统，每个用户都相当于一份备份， 管理员无需为数据备份而担心。再有Git中包括提交、文件内容等都通过SHA1哈希保证数据的完整性， 任何恶意篡改历史数据都会被及时发现从而被挫败。




更多的十条喜欢Git的理由，参见 《Git权威指南》 第11-21页。

异地协同工作。
现场版本控制。
重写提交说明。
无尽的后悔药。
更好用的提交列表。
更好的差异比较。
工作进度保存。
作为SVN前端实现移动办公。
无处不在的分页器。
快。





什么情况推荐使用SVN

SVN具有的悲观锁的功能，能够实现一个用户在编辑时对文件进行锁定，阻止多人同时编辑 一个文件。这一悲观锁的功能是 Git 所不具备的。对于以二进制文件 （Word文档、PPT演示稿） 为主的版本库，为避免多人同时编辑造成合并上的困难， 建议使用SVN做版本控制。
