每个视图使用一个key，用于主从直接数据传输的认证、数据加密
#dnssec-keygen -a hmac-md5 -b 128 -n HOST liantong
#dnssec-keygen -a hmac-md5-b 128 -n HOST dianxin
#dnssec-keygen -a hmac-md5-b 128 -n HOST any


新建acl
-- -- -- -- -- -- -- --
dianxin.conf:
acl dianxin {

202.96.209.133;

};
-- -- -- -- -- -- -- --
liantong.conf
acl liantong {

202.102.152.3;

}; 
-- -- -- -- -- -- -- --


我们共新建了三个view，分别是liantong、dianxin、any。其中liantong负责为联通用户处理查询请求，dianxin负责为电信用户处理查询请求，any负责处理既不是联通用也不是电信用户的查询请求




//
// named.conf for Red Hat caching-nameserver
//
 
options {
    directory "/var/named";
    dump-file "/var/named/data/cache_dump.db";
    statistics-file "/var/named/data/named_stats.txt";
    #recursion no;
    notify yes;
    listen-on {  58.90.26.21;};
    version "who knows? ";
    /*
     * If there is a firewall between you and nameservers you want
     * to talk to, you might need to uncomment the query-source
     * directive below.  Previous versions of BIND always asked
     * questions using port 53, but BIND 8.1 uses an unprivileged
     * port by default.
     query-source address * port 53;
        allow-transfer { 1.2.82.229; localhost;};
        notify yes;
    */
    allow-transfer { 1.2.82.229; localhost;};
};
logging {
              channel query_log {
                      file "query.log";
                      severity        info;
                      print-time        yes;
                      print-category  yes;
              };
              category queries {
                      query_log;
              };
          category lame-servers { null; };
      };
//
//
// a caching only nameserver config
//
controls {
    inet 127.0.0.1 allow { localhost; } keys { rndckey; };
};
include "/etc/rndc.conf";
include "/etc/liantong.conf";
include "/etc/cianxin.conf";
#include "/etc/yd.conf";
 
key liantong-key {
algorithm hmac-md5;
secret "sUdjqo2iWnd44IJbKR8Mvg==";
};
 
key dianxin-key {
algorithm hmac-md5;
secret "j4Hk3JEJwCVxYOckQEHPMg==";
};
 
key any-key {
algorithm hmac-md5;
secret "FkLP4qIWRe+9iQd5rYhUxw==";
};
 
##################################this is for Liantong's IPs####################################################
view "view_liantong"
{
match-clients { LT; };
 
        zone "." IN {
                type hint;
                file "named.ca";
        };
 
        zone "localhost" IN {
                type master;
                file "localhost.zone";
                allow-update { none; };
        };
 
        zone "0.0.127.in-addr.arpa" IN {
                type master;
                file "named.local";
                allow-update { none; };
        };
 
zone "sheriy.com" {
        type    master;
        file    "184/lt.sheriy.com.db";
        also-notify { 218.104.82.229; };
        notify  YES;
};
 
};
###############################This is for Dianxin's IPS#######################################################
view "view_dianxin"
{
match-clients { DX; };
 
        zone "." IN {
                type hint;
                file "named.ca";
        };
 
        zone "localhost" IN {
                type master;
                file "localhost.zone";
                allow-update { none; };
        };
 
        zone "0.0.127.in-addr.arpa" IN {
                type master;
                file "named.local";
                allow-update { none; };
        };
 
zone "sheriy.com" {
        type    master;
        file    "184/dx.sheriy.com.db";
        also-notify { 218.104.82.229; };
        notify  YES;
};
 
};
 
#############################This is for others IP###############################################
view "view_any"
{
match-clients { any; };
 
        zone "." IN {
                type hint;
                file "named.ca";
        };
 
        zone "localhost" IN {
                type master;
                file "localhost.zone";
                allow-update { none; };
        };
 
        zone "0.0.127.in-addr.arpa" IN {
                type master;
                file "named.local";
                allow-update { none; };
        };
        zone "sheriy.com" {
        type    master;
        file    "184/sheriy.com.db";
        notify  YES;
        also-notify { 1.2.82.229; };
 
};
}




在上一篇智能DNS的设定，已经能实现智能解析，但一台始终是不安全的，所以做了一个主从。当然主的服务器也做了一些修改，具体如下啦。假设你有两个view:liantong和dianxin,你修改了liantong的sheriy.com的view,现在/etc/int.d/named reload lt.sheriy.com ,这是会遇到以下问题：

1.从服务器不知道该更新哪个一个view,是电信还是联通呢？

2.假设从服务器按照SOA的refresh值去查主从的serial值 这时候该查主服务哪个view哪个值呢？

3.修改了主服务器记录之后 ，reload是哪一个view下面的值呢？

有问题肯定就有解决办法，还记得TSIG key 么？为什么它可以用来简化 view 的设置呢？

因为一旦使用 TSIG ，则两台 server 之间的通信都会用指定的 key 进行标识；通信双方必须具有一样的 key ，如果 key 不一致，则另一方会拒绝请求。

是否可以从这点推广到 view 的配置呢？

答案是可以的。

先介绍一下环境:

主服务器:公网IP：58.40.26.21;私网IP：192.168.1.2

从服务器：公网IP：22.26.14.163;私网IP：192.168.1.3

下面以具体的配置为例说明 ：（注意，只列出部分语句而已 ！！）


主服务器


view “view_liantong” //定义一个名字叫view_liantong的视图
{
match-clients { key liantong-key;LT; };//匹配那些用liantong-key加密的请求和联通的IP，这个设置在上个博客有说明
recursion no;// 禁止处理来自 liantong 的主机的递归请求
allow-transfer {key liantong-key;};// 只允许用 liantong-key 加密过的 zone transfer 请求
server 192.168.1.3 {keys liantong-key;}; // 向从服务器发送消息时，用 liantong-key 加密

zone “.” IN {
type hint;
file “named.ca”;
};

zone “localhost” IN {
type master;
file “localhost.zone”;
allow-update { none; };
};

zone “0.0.127.in-addr.arpa” IN {
type master;
file “named.local”;
allow-update { none; };
};

zone “sheriy.com” {
type master;
file “184/lt.sheriy.com.db”;
also-notify { 192.168.1.3; };
notify YES;
};

};
};
view “view_dianxin”//定义一个名字叫view_dianxin的视图
{
match-clients { key dianxin-key ;DX; };//匹配那些用dianxin-key加密的请求和联通的IP，这个设置在上个博客有说明
recursion no;//禁止处理来自 liantong 的主机的递归请求
allow-transfer {key dianxin-key;};//只允许用 liantong-key 加密过的 zone transfer 请求
server 192.168.1.3 {keys dianxin-key;}; // 向从服务器发送消息时，用 dianxin-key 加密
zone “.” IN {
type hint;
file “named.ca”;
};

zone “localhost” IN {
type master;
file “localhost.zone”;
allow-update { none; };
};

zone “0.0.127.in-addr.arpa” IN {
type master;
file “named.local”;
allow-update { none; };
};

zone “sheriy.com” {
type master;
file “184/dx.sheriy.com.db”;
also-notify { 192.168.1.3; };
notify YES;
};

};


从服务器


view “view_liantong”//定义一个名字叫view_liantong的视图
{
match-clients { key liantong-key ;LT; };//匹配那些用liantong-key加密的请求和联通的IP，这个设置在上个博客有说明
#allow-transfer {key liantong-key;};
recursion no;// 禁止处理来自 liantong 的主机的递归请求
allow-transfer {none;}; // 禁止任何人向从服务器请求 zone transfer
server 192.168.1.2 {keys liantong-key;}; // 向主服务器发送消息时，用liantong-key 加密
zone “.” IN {
type hint;
file “named.ca”;
};

zone “sheriy.com” {
type slave;
file “184/lt.sheriy.com.db”;
masters { 192.168.1.2;};

};

};
###############################This is for Dianxin’s IPS#######################################################
view “view_dianxin”
{
match-clients { key dianxin-key ;DX; };
#allow-transfer {key dianxin-key;};
recursion no;// 禁止处理来自 dianxin 的主机的递归请求
allow-transfer {none;}; // 禁止任何人向从服务器请求 zone transfer
server 192.168.1.2 {keys dianxin-key;}; // 向主服务器发送消息时，用 dianxin-key 加密
zone “.” IN {
type hint;
file “named.ca”;
};

# zone “localhost” IN {
# type slave;
# file “localhost.zone”;
# allow-update { none; };
# };

# zone “0.0.127.in-addr.arpa” IN {
# type slave;
# file “named.local”;
# allow-update { none; };
# };

zone “sheriy.com” {
type slave;
file “184/dx.sheriy.com.db”;
masters { 192.168.1.2;};

};

};



过程分解：

1.修改了dianxin视图中的sheriy.com解析的zone,正确的reload方法是:/etc/init.d/named reload dx.sheriy.com.db IN view_dianxin,记得后面加上IN view_dianxin

2）主服务器将向从服务器发送一个 notify 消息，这个消息是用 dianxin-key 标识过的。

(主–>从 notify)

3.当从服务器收到这个 notify 消息时，会根据消息尾部的 TSIG 部分找出 key 的名称 ：dianxin-key 。

4.从服务器对比每个 view 的 match-clients ，发现匹配 view_dianxin 这个 view 的设定 

5.从服务器返回一个 notify response 消息，根据 view-dianxin  的 server 语句，用 dianxin-key 加密并发给主服务器。

    （从→主 ：notify response.)

6.接着从服务器就会启动 soa query，同样该 query 也是用 dianxin-key 加密的。（从→主 ：soa query)

7.主服务器收到这个 soa query 后，发现是用 dianxin-key加密的 ，返回 view_dianxin 的 dx.sheriy.com. SOA 记录，
并用 dianxin-key 进行表示（主→从 ：soa query response.)

8.从服务器在收到来自主服务器的 response 后，和它自己 view_dianxin的 dx.sheriy.com zone 的 serial 比较，发现的确是
增大了

9.从服务器向主服务器发送 tcp 消息，请求 zone transfer （从→主 ：zone transfer 请求)

10.主服务器检查 view_dianxin 的 allow-transfer ，发现该请求是以 dianxin-key 加密的，则允许进行 zone transfer 

11.主服务器返回 view_dianxin 的 sheriy.com 这个 zone 的数据（来自文件 dx.sheriy.com.db.

      （主→从 ：zone transfer 开始)

12.zone transfer 完成，主从服务器关闭 TCP  连接 （zone transfer 完成.)
需要注意的:

1.两台服务器key要一样

2.两台服务器时间要一致，超过5分钟误差就无法同步了






创建DNSbed的目的很简单，一是手工配置和管理BIND智能DNS服务器很麻烦，二是市面上目前没有适合我的智能DNS服务器。

搭建一套智能DNS系统（包括设置好主从同步）不难，但是麻烦，手工去改配置文件不直观，而且容易出错。

也有很多基于WEB的DNS管理系统，但它们的后台基本都是BIND + DLZ。我不喜欢DLZ，它使BIND的查询性能严重下降。而且，使用DLZ后，BIND的Notify机制就没有了，主从之间的ZONE同步依靠数据库复制来实现。在网络不好的情况下，这个机制很不靠谱。

国内在智能DNS方面做得最好的就是DNSPod。DNSPod不是用的BIND，是自己实现的DNS解析系统。这个系统我分析过，并不是标准DNS实现。它是在网络低层拦截DNS请求，并通过字符串比对来解析域名的。例如，对于www.abc.com的查询请求到达DNSPod后，它在网络层或传输层处理这个请求（而不是像BIND一样在应用层），拿到域名并查询数据库，将查询结果返回给用户。在DNSPod里，没有ZONE的概念，一切皆是字符。

这个概念实际上是跟F5学的。我之前在使用F5的3DNS时，就发现F5在内核层拦截DNS包，对于命中wildip的直接在内核层就应答了，非wildip的普通域名才转发给应用层，由BIND来处理。F5的wildip能实现复杂的负载均衡和很高的查询性能，它实际是由内核DNS来做解析，而不是BIND解析的。

BIND处理一个域名查询要复杂的多，它严格遵循DNS相关协议。例如查询mail.nsbeta.info这个域名，对于一台公共DNS缓存服务器，其解析过程如下：


对BIND而言，它有ZONE的概念，严格支持ZONE递归查询。也就是说，对于这样一条域名：s1.s2.s3.abc.com，BIND很清楚它位于哪个ZONE里，由哪个NS来权威解析。但是对类DNSPod系统而言，无法区分这个域名位于哪个ZONE。如果用户在DNSPod上设置了如下3个域：
s2.s3.abc.com
s3.abc.com
abc.com

那么s1.s2.s3.abc.com这个记录，可以位于上述任何一个域里。如果abc.com的NS服务器也根据字符匹配命中，返回这个域名的权威应答，就违背了DNS协议，其他公共DNS服务器会很困惑因而引发问题。对BIND而言，则不会发生这种情况。如果s1.s2.s3.abc.com的查询到了abc.com的NS服务器，它会返回一个引用，引导用户查询s3.abc.com的NS服务器。同样，请求到了s3.abc.com的NS服务器，它仍然返回一个引用，引导用户查询s2.s3.abc.com的NS服务器。最终查询到了s2.s3.abc.com的NS服务器，由这个服务器作出权威应答。

所以对于DNSPod这类非标准系统，我个人并不感兴趣。当然，DNSPod的用户体验做得好，用起来顺手，这点很赞。

今年过年时，在家呆着没太多事做，就想为何不自己做一套WEB DNS解析系统。说做就做，从初一到初八，每天都花半天时间写程序，很快后台解析系统就写好了。基础架构是BIND9 View + TSIG Key + DNS动态扩展。核心组件还是BIND，没有使用广泛应用的BIND DLZ，而是自己写了一套动态扩展模块，可以灵活增加ZONE和DNS记录。抛弃DLZ的好处是可以全部利用BIND的高查询能力，不会导致性能下降，而且水平扩容非常方便。例如，水平增加一台名字服务器，只需要几分钟就可配置好，不依赖任何数据库的东西。当然，在WEB系统里我也用了Mysql，但这个只是作为管理用途，例如保存用户提交的ZONE与DNS记录数据，与BIND完全无关。在Mysql与BIND之间有一套Map系统，就是我的动态扩展模块。

后台写好后，就请之前的同事写了一套WEB模板。然后套模板、调试，大概花了半个月时间，在今年2月底这个系统就上线了。

做好以后，一直没怎么维护，主要是时间和精力有限。DNSbed也只是很简单的一个系统，实现了基本智能解析功能，其他细节例如统计、暂停、搜索功能都没有。而且，目前最不方便的地方是，对于每个域名，都要在电信、联通、教育、默认四个线路上添加记录。因为BIND View就是这个样子，当时我也没考虑太多，把一切交给用户定制。现在觉得这点的确是不太方便，增加用户的工作量。今后有时间改版，先把这个问题改正过来。
