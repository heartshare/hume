http://www.perlcn.com/perlbc/perljj/445.html



　DBI 模块提供了一个 do（）方法用以简化工作，取代了原先需要被调用的 prepare（）和 execute（）方法。实际上，DBI 模块中的 do（）方法只是简单地包含了 prepare（）和 execute（）方法。这种方法在使用添写方法生成 SQL 执行语句的时候和分别使用 prepare（）方法和 execute（）方法没有任何性能上面的区别，但是如果使用了参数绑定的 SQL 执行语句生成方法，两者在性能上将会有显著地差别。因为使用 do（）方法的话，以 INSERT 操作为例，对于每条被插入的记录，数据库必须解析每条插入语句，并且生成执行计划。然而使用 prepare（）方法的话，可以在 prepare（）方法中使用占位符，而使得所有的插入语句可以共用一个执行计划，达到了提升效率的目地



　　在准备阶段，有一个重要的概念就是数据绑定，与之相关的有三个术语：占位符（placeholder），参数（parameter）和绑定（binding），他们都是用来根据程序上下文动态地生成 SQL 语句。将变量放入 SQL 语句的方法有两种：第一种通过添写方法生成 SQL 语句（interpolated SQL statement creation），该方法将变量直接通过字符串和 SQL 语句的其它部分连接起来，生成可以被执行的 SQL 语句。程序五展示了一个利用 Perl 字符串技术生成的一个 SQL 执行语句。


　　第二种方法在 SQL 语句中使用占位符，并且通过 bind_param（）方法将变量与之绑定，生成 SQL 语句。无论何时，bind_param（）方法必须在 execute（）方法之前被调用，否则被绑定的参数无法填入 SQL 语句中，而对 SQL 语句的调用也注定会失败。采用绑定方法是成 SQL 语句（Bind value SQL statement creation）的一个典型的例子见程序六。


　　第一种方法使用 Perl 的字符串处理函数，生成一条完整的 SQL 语句，并将它送往后台数据库；而绑定方法则不同，它将含有占位符的 SQL 语句和绑定值分开传送给数据，在数据后台处理数据绑定，然后执行绑定后的 SQL 语句。两种不同的处理方法将会带来性能上的巨大差异，尤其是在有大量相似的 SQL 语句需要被处理的情况下。主流的大型数据库都有一种被称为“Shared SQL Cache”的部件，它存储了诸如查询语句执行计划之类的辅助数据结构，帮助数据库执行 SQL 语句。在得到一个新的处理 SQL 语句的请求时，如果 SQL 语句已经存在于“Shared SQL Cache”中，数据库就不需要重新处理这条语句，而可以重用 Cache 中存储的信息，这样就可以带来性能上的显著提升。

　　存储过程运行在后台数据库上，可以有效地减少客户端和数据库之间的通讯量。在这种工作模式下，客户端不再需要将每一条需要被执行的 SQL 语句发往后台数据库，借助存储过程可以将所有要执行的 SQL 语句定义在一个存储过程内，统一执行并且返回运算结果给客户端。

　　在 DBI 模块中有一个和 bind_param（）方法相似的方法，叫做 bind_param_inout（）方法，可以从执行语句句柄中直接返回值。这个方法最主要的应用在于调用存储过程用来接收参数和返回结果。需要注意的是，某些数据库（比如 MySql）不支持这种方法。bind_param_inout（）方法通过传递引用的方式向数据库传入一个可以接受返回值的参数，一个简单的例子如下：




　　数据库事务是一种将一组相互之间有密切关系的 SQL 语句放到一起执行的技术，它们要么都被成功执行，要么都执行失败，我们称之为“all-or-nothing”模式。一个事务从它的第一条可被执行的 SQL 语句开始，到被提交（commit）或者回滚（rollback）结束。如果一个事务被提交，那么它对数据库所作的所有修改都会被保存并且对其它并发过程可见；如果一个事务被回滚，它对数据库所作的所有修改都会被放弃。

　　并不是所有的数据库软件都支持事务，但是对于所有支持事务的数据库，DBI 模块提供了统一的接口用于操作事务。尽管数据库的实现各不相同，DBI 模块提供了事务自动提交（auutomatic transcation committing）和手工事务处理（powerful manual transaction）的两种不同处理方式。如果用户在创建一个数据库句柄（database handle）时，将句柄的参数“AutoCommit”设置为 1，那么通过这个数据库句柄执行的每一条 SQL 语句的操作都会被立即提交，而不需要任何显式语句进行提交或回滚；反之，如果参数“AutoCommit”被设置为 0，则每个事物都必须以显示地调用 commit（）方法或 rollback（）方法来结束。如果后台数据库不支持事务处理，那么当用户试图修改“AutoCommit”参数为 0 的时候，DBI 模块将会抛出错误。在 DBI 模块中定义了 commit（）方法，用来显式地提交在一个事务范围内对数据库所作的修改。该方法通过数据库句柄来调用，如下：




