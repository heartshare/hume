首先，上千台server规模已经很大了，个人觉得一个管理员能support的服务器上限是500台。因为自动化程度再高的环境，也会有很多突发情况需要处理的：网络不稳定，监控报警的处理，还有公司内部的各种case都可能要管理员从特定server上取数据。所以假定需要2-3个管理员。
所以，日常运维使用脚本批量的方法并不可取：

    太过依赖管理员技术水平，不利于知识的传递。shell script很牛的人，可能不懂perl。perl很牛的人可能不懂python，python很牛的人可能从来没用过expect。有人可能会开玩笑说这样子公司就不敢开你了，但是，如果你是升迁呢？找个和你一样牛的人真的很难的，你会发现工作交接真的很头大！
    维护工作千变万化，脚本随时可能做修改，调试成本高，出错的风险也大。一次错一千台，看老板怎么骂死你！
    随着时间的推移，脚本会越来越多，越来越长，工作交接的问题又来了。最后你可能自己都记不清test_run.sh 是用来干嘛的了。
    管理员写脚本的习惯，也会成为知识传递的问题。命令不加注释，缩进不规范，爱用管道，超级长的命令组合写在同一行。
    服务器信息的维护。为了跑脚本，每个server至少需要维护一个IP列表。新增、修改、删除随时都可能发生，错漏的情况必然会发生。还会有冲突的情况，A的脚本没跑完，B就需要修改这个文件.....
    部分server脚本运行失败时，手工干预麻烦。试想如果1000台中有80个server运行失败了，你怎么办呢？一台台登陆上去再跑一次脚本？
    其他未知问题.....


所以我比较推崇使用已经成熟的管理工具，我目前用的是CFEngine。Puppet我没用过，各有优势吧。目前puppet貌似还不支持修改文本文件，要更新某个文件只能完整copy。

使用这种工具的好处：

    只需要学习一种知识。只需要学习CFEngine的语法，就能看懂并且管理所有的控制文件。
    安全和效率有保障。像CFEngine之类的管理工具，server 和 client之间的交互支持加密，文件的copy只需要再checksum不匹配的情况下发生。也可以很简单的修改配置文件中的某一行。
    无痛实现server的增删改。定义好role和对应的policy之后，新增的server只需要加入到这个role，所有的policy自动下发实现。
    策略应用失败自动报告。这类工具一般都内置汇报机制，policy运行失败，自动发送邮件通知（或其他方式）。
    提供成熟的配置检查方法，根据进程，文件（目录）内容、权限等检查的结果，自动运行对应的策略。


个人觉得第一条最重要了。确保了知识的有效传递。对公司、工作和自己的职业道德都是负责任的表现。

当然脚本批量化也不是不能用，在处理突发事件时，脚本批量操作是非常有效和及时的。

先说这么多，等待同学们拍砖！
